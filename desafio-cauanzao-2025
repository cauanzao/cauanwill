const animais = {
  Rex: { tipo: 'cão', brinquedos: ['RATO', 'BOLA'] },
  Mimi: { tipo: 'gato', brinquedos: ['BOLA', 'LASER'] },
  Fofo: { tipo: 'gato', brinquedos: ['BOLA', 'RATO', 'LASER'] },
  Zero: { tipo: 'gato', brinquedos: ['RATO', 'BOLA'] },
  Bola: { tipo: 'cão', brinquedos: ['CAIXA', 'NOVELO'] },
  Bebe: { tipo: 'cão', brinquedos: ['LASER', 'RATO', 'BOLA'] },
  Loco: { tipo: 'jabuti', brinquedos: ['SKATE', 'RATO'] }
};

const brinquedosValidos = new Set(['RATO', 'BOLA', 'LASER', 'CAIXA', 'NOVELO', 'SKATE']);

class AbrigoAnimais {

  encontraPessoas(brinquedosPessoa1, brinquedosPessoa2, ordemAnimais) {
    const brinquedos1 = this.parseBrinquedos(brinquedosPessoa1);
    const brinquedos2 = this.parseBrinquedos(brinquedosPessoa2);
    const animaisOrdem = this.parseAnimais(ordemAnimais);

    const validacao = this.validarEntradas(brinquedos1, brinquedos2, animaisOrdem);
    if (validacao.erro) return { erro: validacao.erro };

    const resultado = {};
    const adotadosPessoa1 = [];
    const adotadosPessoa2 = [];

    for (const animal of animaisOrdem) {
      const podePessoa1 = this.podeAdotar(animal, brinquedos1, adotadosPessoa1);
      const podePessoa2 = this.podeAdotar(animal, brinquedos2, adotadosPessoa2);

      if (podePessoa1 && podePessoa2) {
        resultado[animal] = 'abrigo';
      } else if (podePessoa1) {
        adotadosPessoa1.push(animal);
        resultado[animal] = 'pessoa 1';
      } else if (podePessoa2) {
        adotadosPessoa2.push(animal);
        resultado[animal] = 'pessoa 2';
      } else {
        resultado[animal] = 'abrigo';
      }
    }

    const lista = Object.keys(resultado)
      .sort()
      .map(animal => `${animal} - ${resultado[animal]}`);

    return { lista };
  }

  parseBrinquedos(str) {
    if (!str) return [];
    return str.split(',')
      .map(s => s.trim().toUpperCase())
      .filter(s => s.length > 0);
  }

  parseAnimais(str) {
    if (!str) return [];
    return str.split(',')
      .map(s => s.trim());
  }

  validarEntradas(brinquedos1, brinquedos2, animaisOrdem) {
    // Validar animais primeiro
    const animaisSet = new Set();
    for (const a of animaisOrdem) {
      if (!animais[a]) return { erro: 'Animal inválido' };
      if (animaisSet.has(a)) return { erro: 'Animal inválido' };
      animaisSet.add(a);
    }

    // Validar brinquedos pessoa 1
    const brinquedosSet1 = new Set();
    for (const b of brinquedos1) {
      if (!brinquedosValidos.has(b)) return { erro: 'Brinquedo inválido' };
      if (brinquedosSet1.has(b)) return { erro: 'Brinquedo inválido' };
      brinquedosSet1.add(b);
    }

    // Validar brinquedos pessoa 2
    const brinquedosSet2 = new Set();
    for (const b of brinquedos2) {
      if (!brinquedosValidos.has(b)) return { erro: 'Brinquedo inválido' };
      if (brinquedosSet2.has(b)) return { erro: 'Brinquedo inválido' };
      brinquedosSet2.add(b);
    }

    return {};
  }

  podeAdotar(animal, brinquedosPessoa, adotadosPessoa) {
    const info = animais[animal];
    if (!info) return false;
    if (adotadosPessoa.length >= 3) return false;

    if (animal === 'Loco') {
      if (adotadosPessoa.length === 0) return false;
      return info.brinquedos.every(b => brinquedosPessoa.includes(b));
    }

    if (info.tipo === 'gato') {
      return this.temSubsequenciaExata(info.brinquedos, brinquedosPessoa);
    } else {
      return this.temSubsequencia(info.brinquedos, brinquedosPessoa);
    }
  }

  temSubsequencia(arr1, arr2) {
    let i = 0, j = 0;
    while (i < arr1.length && j < arr2.length) {
      if (arr1[i] === arr2[j]) i++;
      j++;
    }
    return i === arr1.length;
  }

  temSubsequenciaExata(arr1, arr2) {
    let j = 0;
    for (let i = 0; i < arr2.length; i++) {
      if (arr2[i] === arr1[j]) j++;
      else if (arr1.includes(arr2[i])) return false;
    }
    return j === arr1.length;
  }
}

export { AbrigoAnimais };

